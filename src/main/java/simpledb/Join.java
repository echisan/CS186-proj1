package simpledb;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;
    private DbIterator child1;
    private DbIterator child2;
    private String child1FieldName;
    private String child2FieldName;
    private List<Tuple> child1Tuples;
    private List<Tuple> child2Tuples;
    private List<Tuple> res;
    private Iterator<Tuple> it;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.child1FieldName = child1.getTupleDesc().getFieldName(joinPredicate.getField1());
        this.child2FieldName = child2.getTupleDesc().getFieldName(joinPredicate.getField2());
        this.child1Tuples = new ArrayList<>();
        this.child2Tuples = new ArrayList<>();
        this.res = new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        return child1FieldName;
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        return child2FieldName;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();

        while (child1.hasNext()) {
            child1Tuples.add(child1.next());
        }
        while (child2.hasNext()) {
            child2Tuples.add(child2.next());
        }

        child1Tuples.forEach(tuple -> {
            child2Tuples.forEach(x -> {
                if (getJoinPredicate().filter(tuple, x)) {
                    res.add(merge(tuple, x));
                }
            });
        });

        it = res.iterator();
        super.open();
    }

    private Tuple merge(Tuple t1, Tuple t2) {
        Tuple tuple = new Tuple(getTupleDesc());
        int idx = 0;
        Iterator<Field> fields1 = t1.fields();
        while (fields1.hasNext()) {
            tuple.setField(idx, fields1.next());
            idx++;
        }
        Iterator<Field> f2 = t2.fields();
        while (f2.hasNext()) {
            tuple.setField(idx, f2.next());
            idx++;
        }
        return tuple;
    }


    public void close() {
        // some code goes here
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it = res.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if (it != null && it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{
                this.child1, this.child2
        };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
